// SPDX-License-Identifier: MIT
pragma solidity ^0.8.24;

import "@openzeppelin/contracts/utils/Strings.sol";

import "../Controller.sol";

contract MockExploitedController is Controller {
    using Strings for string;
    constructor(address nftAddress, address pcspAddress) Controller(nftAddress, pcspAddress) {}

    function confirm(
        string memory docId,
        string memory contentHash,
        string memory proof,
        uint256 sessionId,
        uint256 riskScore
    ) public override {
        require(proof.equal("success"));
        require(!docSubmits[docId], "Doc already been submitted");
        // // Cache here for saving reading cost from storage
        UploadSession memory session = sessions[sessionId];
        require(session.user == msg.sender, "Invalid session owner");
        require(!session.confirmed, "Session is ended");

        docs[docId] = DataDoc({
            id: docId,
            hashContent: contentHash
        });

        uint256 nftToken = geneNFT.safeMint(msg.sender);
        nftDocs[nftToken] = docId;
        pcspToken.reward(msg.sender, riskScore);

        // The session is closed after rewards are distributed. 
        // However, an attacker could exploit the ERC721Receiver function to repeatedly call the `confirm` function and receive rewards multiple times.
        docSubmits[docId] = true;
        session.proof = proof;
        session.confirmed = true;
        sessions[sessionId] = session;
    }
}